@model CleaningService.Models.AdminViewModel
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Cleaning Admin Dashboard";
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />
    <style>
        body {
            padding-bottom: 40px;
        }

        .card {
            margin-bottom: 20px;
        }

        textarea {
            font-family: monospace;
        }
    </style>
    <!-- Подключаем jQuery и SignalR через CDN -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <a class="navbar-brand" href="/admin">Cleaning Admin</a>
    </nav>
    <div class="container mt-4">
        <h2 class="text-center">Cleaning Admin Dashboard</h2>
        @if (TempData["Message"] != null)
        {
            <div class="alert alert-success">@TempData["Message"]</div>
        }
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger">@TempData["Error"]</div>
        }

        <!-- Row: Update Configuration, Toggle Mode, Update Vehicle Capacity, Update Meal Types -->
        <div class="row mb-3">
            <!-- Update Configuration -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">Update Configuration</div>
                    <div class="card-body">
                        <form id="updateConfigForm">
                            <div class="form-group">
                                <label for="ConflictRetryCount">Conflict Retry Count</label>
                                <input type="number" class="form-control" name="ConflictRetryCount" id="ConflictRetryCount" value="@Model.Config.ConflictRetryCount" required />
                            </div>
                            <div class="form-group">
                                <label for="NumberOfCleaningVehicles">Number of Cleaning Vehicles</label>
                                <input type="number" class="form-control" name="NumberOfCleaningVehicles" id="NumberOfCleaningVehicles" value="@Model.Config.NumberOfCleaningVehicles" required />
                            </div>
                            <button type="submit" class="btn btn-primary btn-block">Update Config</button>
                        </form>
                        <div id="updateConfigResult" class="mt-2"></div>
                    </div>
                </div>
            </div>
            <!-- Toggle Mode -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">Toggle Mock Mode</div>
                    <div class="card-body">
                        <form method="post" action="/admin/toggleMode">
                            <div class="form-group">
                                <label>Use Mock?</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="useMock" id="useMockTrue" value="true" @(Model.Mode == "Mock" ? "checked" : "") />
                                    <label class="form-check-label" for="useMockTrue">Yes (Mock)</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="useMock" id="useMockFalse" value="false" @(Model.Mode == "Real" ? "checked" : "") />
                                    <label class="form-check-label" for="useMockFalse">No (Real)</label>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-primary btn-block">Set Mode</button>
                        </form>
                    </div>
                </div>
            </div>
            <!-- Update Vehicle Capacity -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">Update Vehicle Capacity</div>
                    <div class="card-body">
                        <form id="updateCapacityForm">
                            <div class="form-group">
                                <label for="Capacity">New Capacity (units)</label>
                                <input type="number" class="form-control" name="Capacity" id="Capacity" placeholder="Enter new capacity" required />
                            </div>
                            <button type="submit" class="btn btn-primary btn-block">Update Capacity</button>
                        </form>
                        <div id="updateCapacityResult" class="mt-2"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Vehicles Status Table -->
        <div class="card mb-3">
            <div class="card-header">Vehicles Status (Real-Time Updates)</div>
            <div class="card-body">
                <table class="table table-bordered" id="vehiclesTable">
                    <thead class="thead-light">
                        <tr>
                            <th>Vehicle ID</th>
                            <th>Current Node</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var vehicle in Model.Vehicles)
                        {
                            <tr>
                                <td>@vehicle.VehicleId</td>
                                <td>@vehicle.CurrentNode</td>
                                <td>@vehicle.Status</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
        // AJAX для обновления конфигурации
        $(function () {
            $('#updateConfigForm').submit(function (event) {
                event.preventDefault();
                var configData = {
                    ConflictRetryCount: parseInt($('#ConflictRetryCount').val()),
                    NumberOfCleaningVehicles: parseInt($('#NumberOfCleaningVehicles').val())
                };

                $.ajax({
                    url: '/admin/update',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(configData),
                    success: function (response) {
                        $('#updateConfigResult').html('<div class="alert alert-success">' + response.message + '</div>');
                    },
                    error: function (xhr) {
                        $('#updateConfigResult').html('<div class="alert alert-danger">Error: ' + xhr.responseText + '</div>');
                    }
                });
            });
        });

        // AJAX для обновления вместимости
        $(function () {
            $('#updateCapacityForm').submit(function (event) {
                event.preventDefault();
                var capacityValue = $('#Capacity').val();
                $.ajax({
                    url: '/admin/updateCapacityAdmin',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ Capacity: parseFloat(capacityValue) }),
                    success: function (response) {
                        $('#updateCapacityResult').html('<div class="alert alert-success">' + response.message + ' (New capacity: ' + response.capacity + ')</div>');
                    },
                    error: function (xhr) {
                        $('#updateCapacityResult').html('<div class="alert alert-danger">Error: ' + xhr.responseText + '</div>');
                    }
                });
            });
        });

        // SignalR для обновления статусов транспортных средств
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/vehiclestatushub")
            .build();

        connection.on("ReceiveVehicleUpdate", function (vehicles) {
            const tbody = document.getElementById("vehiclesTable").getElementsByTagName("tbody")[0];
            tbody.innerHTML = "";
            vehicles.forEach(function (vehicle) {
                let row = tbody.insertRow();
                row.insertCell(0).innerText = vehicle.vehicleId;
                row.insertCell(1).innerText = vehicle.currentNode;
                row.insertCell(2).innerText = vehicle.status;
            });
        });

        connection.start().then(function () {
            console.log("Connected to VehicleStatusHub");
        }).catch(function (err) {
            console.error(err.toString());
        });
    </script>
</body>
</html>
